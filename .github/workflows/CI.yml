name: CI

on:
  push:
    branches: ["main"]
  pull_request: {}

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test: # Combined job for Linux and macOS with matrix for features
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14] # Using macos-14 as per spec
        rust: [nightly] # Using nightly from rust-toolchain.toml primarily
        features: [all, minimal] # Test default (all) and minimal features
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@master # Use master for latest fixes
        with:
          toolchain: ${{ matrix.rust }} # Will use version from rust-toolchain.toml if present for nightly
          components: rustfmt, clippy, rustc-dev

      - name: Install RocksDB (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y librocksdb-dev clang libclang-dev

      - name: Install RocksDB (macOS)
        if: runner.os == 'macOS'
        run: brew install rocksdb

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain.toml') }}-${{ matrix.features }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain.toml') }}-
            ${{ runner.os }}-cargo-${{ matrix.rust }}-

      - name: Build dependencies (optional, cache should mostly handle this)
        if: steps.cache.outputs.cache-hit != 'true'
        run: cargo fetch # or cargo build --all-targets --all-features to precompile more

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run Clippy (all features)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run Clippy (minimal features)
        if: matrix.features == 'minimal' # Only run minimal clippy if relevant
        run: cargo clippy --all-targets --no-default-features --features minimal -- -D warnings

      - name: Run tests
        run: |
          if [ "${{ matrix.features }}" == "all" ]; then
            cargo test --workspace --all-targets --all-features
          elif [ "${{ matrix.features }}" == "minimal" ]; then
            cargo test --workspace --all-targets --no-default-features --features minimal
          fi

      # - name: Run cargo audit (consider if this is still used/needed)
      #   run: cargo audit --deny warnings

  # Windows job can be kept simpler if full feature set isn't required by spec for it
  windows_build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable # Or nightly if preferred for consistency
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-stable-
      - run: cargo build --workspace # Basic build test for Windows
      - run: cargo test --workspace # Basic tests for Windows (without all features if they cause issues)
